{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport router from '@/router/index.js';\nimport ElementUI from 'element-ui';\nconst myaxios = axios.create({\n  timeout: 5000 //设置请求超时时间\n});\nmyaxios.defaults.baseURL = '/sys'; //设置前端所有的请求的基础路径。\n//axios拦截器( 请求前置，响应前置 )\n//响应结果到达 then()回调函数之前执行。\nmyaxios.interceptors.response.use(response => {\n  //请求到Java服务器，Java代码执行过程中业务方法操作失败，通过Java设置错误返回码\n  let Result = response.data;\n  if (Result.code == 200) {\n    //如果状态码是200，表示请求成功，就正常执行axios请求回调 .then()函数\n    return response;\n  } else {\n    //返回code不是200，表示各种请求的失败码，直接进行错误提示：\n    ElementUI.Message.error(Result.msg ? Result.msg : \"系统异常\", {\n      duration: 1000 //间隔1000毫秒自动关闭错误消息框。\n    });\n    return Promise.reject(response.data.message);\n  }\n}, error => {\n  //http协议: 请求失败，HTTP协议有很多错误码，需要将请求失败错误提示显示。\n  //error是对http请求不同错误状态码做判断\n  if (error) {\n    error.message = error.response.data.msg;\n  }\n  if (error.response.status == 401) {\n    //401：表示Java服务器上的API接口是有权限，当前登录用户不具备该权限，会报401。\n    router.push('/login');\n    return Promise.reject(error);\n  }\n  if (error.response.status == 404) {\n    //HTTP如果是404,就是请求路径有问题，或者请求文件不存在。就跳转至 访问不到资源的错误显示页面\n    router.push('/notFound');\n    return Promise.reject(error);\n  }\n  if (error.response.status == 400) {\n    //状态码是400，就是请求Java服务器方法的方式错误( 没有按照规定请求方法。 )。\n    error.message = '请求服务器端方法错误';\n  }\n  if (error.response.status == 500) {\n    error.message = '服务器端代码发生错误';\n  }\n  //弹框显示错误信息\n  Element.Message.error(error.message, {\n    duration: 1000\n  });\n  return Promise.reject(error);\n});\nexport default myaxios;","map":{"version":3,"names":["axios","router","ElementUI","myaxios","create","timeout","defaults","baseURL","interceptors","response","use","Result","data","code","Message","error","msg","duration","Promise","reject","message","status","push","Element"],"sources":["D:/hospital/app/src/api/index.js"],"sourcesContent":["import axios from \"axios\"\r\nimport router from '@/router/index.js'\r\nimport ElementUI from 'element-ui'\r\n\r\nconst myaxios = axios.create({\r\n    timeout: 5000,  //设置请求超时时间\r\n});\r\nmyaxios.defaults.baseURL = '/sys';  //设置前端所有的请求的基础路径。\r\n//axios拦截器( 请求前置，响应前置 )\r\n//响应结果到达 then()回调函数之前执行。\r\nmyaxios.interceptors.response.use(response => {\r\n    //请求到Java服务器，Java代码执行过程中业务方法操作失败，通过Java设置错误返回码\r\n    let Result = response.data;\r\n    if (Result.code == 200) {\r\n        //如果状态码是200，表示请求成功，就正常执行axios请求回调 .then()函数\r\n        return response;\r\n    } else {\r\n        //返回code不是200，表示各种请求的失败码，直接进行错误提示：\r\n        ElementUI.Message.error(Result.msg ? Result.msg : \"系统异常\", {\r\n            duration: 1000,  //间隔1000毫秒自动关闭错误消息框。\r\n        });\r\n        return Promise.reject(response.data.message);\r\n    }\r\n}, error => {\r\n    //http协议: 请求失败，HTTP协议有很多错误码，需要将请求失败错误提示显示。\r\n    //error是对http请求不同错误状态码做判断\r\n    if (error) {\r\n        error.message = error.response.data.msg;\r\n    }\r\n    if (error.response.status == 401) {\r\n        //401：表示Java服务器上的API接口是有权限，当前登录用户不具备该权限，会报401。\r\n        router.push('/login');\r\n        return Promise.reject(error);\r\n    }\r\n    if (error.response.status == 404) {\r\n        //HTTP如果是404,就是请求路径有问题，或者请求文件不存在。就跳转至 访问不到资源的错误显示页面\r\n        router.push('/notFound');\r\n        return Promise.reject(error);\r\n    }\r\n    if (error.response.status == 400) {\r\n        //状态码是400，就是请求Java服务器方法的方式错误( 没有按照规定请求方法。 )。\r\n        error.message = '请求服务器端方法错误';\r\n    }\r\n    if (error.response.status == 500) {\r\n        error.message = '服务器端代码发生错误';\r\n    }\r\n    //弹框显示错误信息\r\n    Element.Message.error(error.message, {\r\n        duration: 1000,\r\n    });\r\n    return Promise.reject(error);\r\n})\r\nexport default myaxios\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EACzBC,OAAO,EAAE,IAAI,CAAG;AACpB,CAAC,CAAC;AACFF,OAAO,CAACG,QAAQ,CAACC,OAAO,GAAG,MAAM,CAAC,CAAE;AACpC;AACA;AACAJ,OAAO,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CAACD,QAAQ,IAAI;EAC1C;EACA,IAAIE,MAAM,GAAGF,QAAQ,CAACG,IAAI;EAC1B,IAAID,MAAM,CAACE,IAAI,IAAI,GAAG,EAAE;IACpB;IACA,OAAOJ,QAAQ;EACnB,CAAC,MAAM;IACH;IACAP,SAAS,CAACY,OAAO,CAACC,KAAK,CAACJ,MAAM,CAACK,GAAG,GAAGL,MAAM,CAACK,GAAG,GAAG,MAAM,EAAE;MACtDC,QAAQ,EAAE,IAAI,CAAG;IACrB,CAAC,CAAC;IACF,OAAOC,OAAO,CAACC,MAAM,CAACV,QAAQ,CAACG,IAAI,CAACQ,OAAO,CAAC;EAChD;AACJ,CAAC,EAAEL,KAAK,IAAI;EACR;EACA;EACA,IAAIA,KAAK,EAAE;IACPA,KAAK,CAACK,OAAO,GAAGL,KAAK,CAACN,QAAQ,CAACG,IAAI,CAACI,GAAG;EAC3C;EACA,IAAID,KAAK,CAACN,QAAQ,CAACY,MAAM,IAAI,GAAG,EAAE;IAC9B;IACApB,MAAM,CAACqB,IAAI,CAAC,QAAQ,CAAC;IACrB,OAAOJ,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;EAChC;EACA,IAAIA,KAAK,CAACN,QAAQ,CAACY,MAAM,IAAI,GAAG,EAAE;IAC9B;IACApB,MAAM,CAACqB,IAAI,CAAC,WAAW,CAAC;IACxB,OAAOJ,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;EAChC;EACA,IAAIA,KAAK,CAACN,QAAQ,CAACY,MAAM,IAAI,GAAG,EAAE;IAC9B;IACAN,KAAK,CAACK,OAAO,GAAG,YAAY;EAChC;EACA,IAAIL,KAAK,CAACN,QAAQ,CAACY,MAAM,IAAI,GAAG,EAAE;IAC9BN,KAAK,CAACK,OAAO,GAAG,YAAY;EAChC;EACA;EACAG,OAAO,CAACT,OAAO,CAACC,KAAK,CAACA,KAAK,CAACK,OAAO,EAAE;IACjCH,QAAQ,EAAE;EACd,CAAC,CAAC;EACF,OAAOC,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CAAC,CAAC;AACF,eAAeZ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}